{"version":3,"names":["react_1","__importStar","require","Global_1","native_1","__importDefault","auth_1","DB_1","GoogleLoginButton_1","AppleLoginButton_1","react_native_1","LottieLogin_1","GuestLoginButton_1","LoadingModal_1","Login","_ref","navigation","_ref2","useState","_ref3","_slicedToArray2","default","isLoading","setLoading","reqSign","useCallback","uid","email","fbUserDBContext","userDB","once","data","exists","set","initialData","setTimeout","replace","handleLogin","user","useEffect","onAuthStateChanged","_jsxRuntime","jsxs","Container","children","jsx","LottieGroup","ButtonGroup","Platform","OS","visible","View","_templateObject","_taggedTemplateLiteralLoose2","_templateObject2","exports"],"sources":["/Users/ryuwoong/Programming/chagok/src/Page/Login/Login.tsx"],"sourcesContent":["import React, {useCallback, useEffect, useState} from 'react';\nimport {Container} from '~/Style/Global';\n\nimport styled from '@emotion/native';\nimport auth, {FirebaseAuthTypes} from '@react-native-firebase/auth';\nimport {NativeStackScreenProps} from '@react-navigation/native-stack';\nimport {MainNavigationParamList} from '~/Navigation/navigation';\nimport {initialData, userDB} from '~/Utils/DB';\nimport GoogleLoginButton from './Component/GoogleLoginButton';\nimport AppleLoginButton from './Component/AppleLoginButton';\n\nimport {Platform} from 'react-native';\nimport LottieLogin from './Component/LottieLogin';\nimport GuestLoginButton from './Component/GuestLoginButton';\nimport LoadingModal from '~/Component/Modal/LoadingModal.tsx/LoadingModal';\n\ntype LoginPageProps = NativeStackScreenProps<MainNavigationParamList, 'Login'>;\n\ninterface Props {\n  navigation: LoginPageProps['navigation'];\n}\n\nfunction Login({navigation}: Props) {\n  const [isLoading, setLoading] = useState(false);\n\n  const reqSign = useCallback(\n    (uid: string, email: string) => {\n      const fbUserDBContext = userDB(uid);\n      fbUserDBContext.once('value', data => {\n        // data가 없다면 유저가 처음 로그인한 것이므로 초기 데이터를 넣어줍니다.\n        if (!data.exists()) {\n          fbUserDBContext.set(initialData(email));\n        }\n        setLoading(false);\n        // 메인 화면으로 로그인 처리.\n      });\n      setTimeout(() => {\n        navigation.replace('Main');\n      }, 100);\n    },\n    [navigation],\n  );\n\n  const handleLogin = useCallback(\n    (user: FirebaseAuthTypes.User | null) => {\n      // User가 존재하지 않거나,\n      // 이미 로그인이 되어 있을 때 Debounce를 걸어 navigation을 여러번 실행시키는 것을 방지합니다.\n      if (!user || !user.uid) {\n        setLoading(false);\n        return;\n      }\n      const {uid, email} = user;\n      reqSign(uid, email ?? 'guest');\n    },\n    [reqSign],\n  );\n\n  useEffect(() => {\n    auth().onAuthStateChanged(user => {\n      // Firebase로그인이 되거나 로그아웃 되면 동작합니다.\n      handleLogin(user);\n    });\n  }, [handleLogin]);\n\n  return (\n    <Container>\n      <LottieGroup>\n        <LottieLogin />\n      </LottieGroup>\n      <ButtonGroup>\n        <GoogleLoginButton setLoading={setLoading} />\n        {Platform.OS === 'ios' && <AppleLoginButton setLoading={setLoading} />}\n        <GuestLoginButton setLoading={setLoading} />\n      </ButtonGroup>\n      <LoadingModal visible={isLoading} />\n    </Container>\n  );\n}\n\nconst LottieGroup = styled.View`\n  flex: 3;\n  align-items: center;\n  padding: 20px;\n`;\n\nconst ButtonGroup = styled.View`\n  flex: 1;\n  justify-content: flex-end;\n  padding-horizontal: 20px;\n  padding-vertical: 25%;\n  gap: 10px;\n`;\n\nexport default Login;\n"],"mappings":"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"}